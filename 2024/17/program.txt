0 (2,4) bst (set b = a & 0b111)
1 (1,3) bxl (set b = b ^ 0b011)
2 (7,5) cdv (set c = a >> b)
3 (4,1) bxc (set b = b ^ c)
4 (1,3) bxl (set b = b ^ 0b011)
5 (0,3) adv (set a = a >> 3)
6 (5,5) out (output b & 0b111)
7 (3,0) jnz (loop back to start if a != 0)

to make a 0 aka 0b000:
on line 4 b must be 0b011
on line 3 b ^ c must be 0b011
on line 2 b ^ (a >> b) must be 0b011
on line 1 (b ^ 0b011) ^ (a >> (b ^ 0b011)) must be 0b011
on line 0 ((a & 0b111) ^ 0b011) ^ (a >> ((a & 0b111) ^ 0b011)) must be 0b011

digits are determined by a sliding window of up to 10 bits, sliding 3 bits at a time
what we will do:
compute every 10-bit value that yields each possible output value
solve this system of constraints with backtracking
that doesn't actually help lol
observation: outputs are uniquely determined by 10 *higher* bits
so we go backwards instead!
the last digit is determined by only the high 3 bits.
the second-to-last digit is determined by only the last digit and the following 3 bits
the third-to-last digit is determined by only the last digit, the second-to-last digit, and the following 3 bits
you still need to backtrack (what if there are multiple options for the second-to-last digit?) but this helps a lot in pruning the tree i think
wait we don't need to backtrack! we're looking for the smallest A, and we're going from most significant to least significant! so if we just check ascending values for each 3-bit value, we're set!
or maybe not, I guess you might need to backtrack if you can't find a valid pattern at all, hmm.
